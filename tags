!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AVOCC_H	avocc.h	2;"	d
FAILED	avocc.h	/^typedef enum { OK, FAILED } avoc_status;$/;"	e	enum:__anon1
ITEM_LIST	avocc.h	/^    ITEM_LIST,$/;"	e	enum:_avoc_item::__anon4
ITEM_LIT_BOL	avocc.h	/^    ITEM_LIT_BOL,$/;"	e	enum:_avoc_item::__anon4
ITEM_LIT_F32	avocc.h	/^    ITEM_LIT_F32,$/;"	e	enum:_avoc_item::__anon4
ITEM_LIT_F64	avocc.h	/^    ITEM_LIT_F64,$/;"	e	enum:_avoc_item::__anon4
ITEM_LIT_I32	avocc.h	/^    ITEM_LIT_I32,$/;"	e	enum:_avoc_item::__anon4
ITEM_LIT_I64	avocc.h	/^    ITEM_LIT_I64,$/;"	e	enum:_avoc_item::__anon4
ITEM_LIT_STR	avocc.h	/^    ITEM_LIT_STR,$/;"	e	enum:_avoc_item::__anon4
ITEM_LIT_U32	avocc.h	/^    ITEM_LIT_U32,$/;"	e	enum:_avoc_item::__anon4
ITEM_LIT_U64	avocc.h	/^    ITEM_LIT_U64,$/;"	e	enum:_avoc_item::__anon4
ITEM_SYM	avocc.h	/^    ITEM_SYM,$/;"	e	enum:_avoc_item::__anon4
LIT_BOL	avocc.h	/^    LIT_BOL,$/;"	e	enum:_avoc_token::__anon3
LIT_NUM	avocc.h	/^    LIT_NUM,$/;"	e	enum:_avoc_token::__anon3
LIT_STR	avocc.h	/^    LIT_STR,$/;"	e	enum:_avoc_token::__anon3
LTEST_FLOAT_TOLERANCE	tests.h	15;"	d
OK	avocc.h	/^typedef enum { OK, FAILED } avoc_status;$/;"	e	enum:__anon1
PRINT_ERROR	avocc.h	105;"	d
PRINT_ERRORF	avocc.h	108;"	d
PRINT_UNEXPECTED_CHAR_ERROR	avocc.h	112;"	d
PRINT_UNEXPECTED_TOKEN_ERROR	avocc.h	118;"	d
TESTS_H	tests.h	2;"	d
TOKEN_COLON	avocc.h	/^    TOKEN_COLON,$/;"	e	enum:_avoc_token::__anon2
TOKEN_COMMENT	avocc.h	/^    TOKEN_COMMENT,$/;"	e	enum:_avoc_token::__anon2
TOKEN_EOF	avocc.h	/^    TOKEN_EOF,$/;"	e	enum:_avoc_token::__anon2
TOKEN_EOL	avocc.h	/^    TOKEN_EOL,$/;"	e	enum:_avoc_token::__anon2
TOKEN_HLE	avocc.h	/^    TOKEN_HLE,$/;"	e	enum:_avoc_token::__anon2
TOKEN_HLS	avocc.h	/^    TOKEN_HLS,$/;"	e	enum:_avoc_token::__anon2
TOKEN_ID	avocc.h	/^    TOKEN_ID,$/;"	e	enum:_avoc_token::__anon2
TOKEN_LIT	avocc.h	/^    TOKEN_LIT,$/;"	e	enum:_avoc_token::__anon2
TOKEN_NIL	avocc.h	/^    TOKEN_NIL,$/;"	e	enum:_avoc_token::__anon2
TOKEN_VLE	avocc.h	/^    TOKEN_VLE,$/;"	e	enum:_avoc_token::__anon2
TOKEN_VLS	avocc.h	/^    TOKEN_VLS,$/;"	e	enum:_avoc_token::__anon2
UTF8_END	avocc.h	103;"	d
UTF8_ERROR	avocc.h	104;"	d
_avoc_item	avocc.h	/^typedef struct _avoc_item {$/;"	s
_avoc_list	avocc.h	/^typedef struct _avoc_list {$/;"	s
_avoc_source	avocc.h	/^typedef struct _avoc_source {$/;"	s
_avoc_token	avocc.h	/^typedef struct _avoc_token {$/;"	s
as_bol	avocc.h	/^    short as_bol;$/;"	m	union:_avoc_item::__anon5
as_f32	avocc.h	/^    float as_f32;$/;"	m	union:_avoc_item::__anon5
as_f64	avocc.h	/^    double as_f64;$/;"	m	union:_avoc_item::__anon5
as_i32	avocc.h	/^    int as_i32;$/;"	m	union:_avoc_item::__anon5
as_i64	avocc.h	/^    long as_i64;$/;"	m	union:_avoc_item::__anon5
as_list	avocc.h	/^    struct _avoc_list *as_list;$/;"	m	union:_avoc_item::__anon5	typeref:struct:_avoc_item::__anon5::_avoc_list
as_str	avocc.h	/^    char *as_str;$/;"	m	union:_avoc_item::__anon5
as_sym	avocc.h	/^    char *as_sym;$/;"	m	union:_avoc_item::__anon5
as_u32	avocc.h	/^    unsigned int as_u32;$/;"	m	union:_avoc_item::__anon5
as_u64	avocc.h	/^    unsigned long as_u64;$/;"	m	union:_avoc_item::__anon5
assert_eq	tests.h	87;"	d
assert_eqf	tests.h	96;"	d
assert_eql	tests.h	90;"	d
assert_eqs	tests.h	93;"	d
assert_ok	tests.h	46;"	d
assert_okb	tests.h	58;"	d
avoc_item	avocc.h	/^} avoc_item;$/;"	t	typeref:struct:_avoc_item
avoc_item_free	avocc.c	/^void avoc_item_free(avoc_item *item) {$/;"	f
avoc_item_init	avocc.c	/^void avoc_item_init(avoc_item *item) {$/;"	f
avoc_list	avocc.h	/^} avoc_list;$/;"	t	typeref:struct:_avoc_list
avoc_list_free	avocc.c	/^void avoc_list_free(avoc_list *list) {$/;"	f
avoc_list_init	avocc.c	/^void avoc_list_init(avoc_list *list) {$/;"	f
avoc_list_merge	avocc.c	/^void avoc_list_merge(avoc_list *left, avoc_list *right) {$/;"	f
avoc_list_push	avocc.c	/^void avoc_list_push(avoc_list *dest, avoc_item *item) {$/;"	f
avoc_next_token	avocc.c	/^avoc_status avoc_next_token(avoc_source *src, avoc_token *token) {$/;"	f
avoc_parse_bol_lit	avocc.c	/^avoc_status avoc_parse_bol_lit(avoc_source *src, avoc_token *token,$/;"	f
avoc_parse_num_lit	avocc.c	/^avoc_status avoc_parse_num_lit(avoc_source *src, avoc_token *token,$/;"	f
avoc_source	avocc.h	/^} avoc_source;$/;"	t	typeref:struct:_avoc_source
avoc_source_free	avocc.c	/^void avoc_source_free(avoc_source *src) {$/;"	f
avoc_source_fwd	avocc.c	/^int avoc_source_fwd(avoc_source *src) {$/;"	f
avoc_source_init	avocc.c	/^void avoc_source_init(avoc_source *src, const char *name, const char *buf_data,$/;"	f
avoc_status	avocc.h	/^typedef enum { OK, FAILED } avoc_status;$/;"	t	typeref:enum:__anon1
avoc_token	avocc.h	/^} avoc_token;$/;"	t	typeref:struct:_avoc_token
avoc_token_init	avocc.c	/^void avoc_token_init(avoc_token *token) {$/;"	f
buf_data	avocc.h	/^  unsigned char *buf_data;$/;"	m	struct:_avoc_source
buf_len	avocc.h	/^  size_t buf_len; \/\/ Buffer total length$/;"	m	struct:_avoc_source
buf_pos	avocc.h	/^  size_t buf_pos; \/\/ Cursor position (two by two code points)$/;"	m	struct:_avoc_source
col	avocc.h	/^  size_t col;$/;"	m	struct:_avoc_source
cur_cp	avocc.h	/^  int cur_cp; \/\/ Current code point value$/;"	m	struct:_avoc_source
cur_cp_pos	avocc.h	/^  long cur_cp_pos; \/\/ Current codepoint position$/;"	m	struct:_avoc_source
cur_pos	avocc.h	/^  size_t cur_pos; \/\/ Current code point position$/;"	m	struct:_avoc_source
head	avocc.h	/^  struct _avoc_item *head;$/;"	m	struct:_avoc_list	typeref:struct:_avoc_list::_avoc_item
item_count	avocc.h	/^  size_t item_count;$/;"	m	struct:_avoc_list
length	avocc.h	/^  size_t length;$/;"	m	struct:_avoc_token
lit_type	avocc.h	/^  } lit_type;$/;"	m	struct:_avoc_token	typeref:enum:_avoc_token::__anon3
lit_type_names	avocc.h	/^__attribute__((unused)) static const char *lit_type_names[] = {"BOL", "NUM",$/;"	v
load_string	tests.h	103;"	d
main	tests.c	/^int main(){$/;"	f
name	avocc.h	/^  char *name;$/;"	m	struct:_avoc_source
next_sibling	avocc.h	/^  struct _avoc_item *next_sibling;$/;"	m	struct:_avoc_item	typeref:struct:_avoc_item::_avoc_item
nxt_cp	avocc.h	/^  int nxt_cp; \/\/ Next code point value$/;"	m	struct:_avoc_source
nxt_cp_pos	avocc.h	/^  long nxt_cp_pos; \/\/ Next codepoint position$/;"	m	struct:_avoc_source
prev_sibling	avocc.h	/^  struct _avoc_item *prev_sibling;$/;"	m	struct:_avoc_item	typeref:struct:_avoc_item::_avoc_item
row	avocc.h	/^  size_t row;$/;"	m	struct:_avoc_source
start_pos	avocc.h	/^  size_t start_pos;$/;"	m	struct:_avoc_token
tail	avocc.h	/^  struct _avoc_item *tail;$/;"	m	struct:_avoc_list	typeref:struct:_avoc_list::_avoc_item
tequal_base	tests.h	73;"	d
test_lists	tests.c	/^void test_lists() {$/;"	f
test_parse_bol_lit	tests.c	/^void test_parse_bol_lit() {$/;"	f
test_source_init_free	tests.c	/^void test_source_init_free() {$/;"	f
test_source_move_fwd_ascii	tests.c	/^void test_source_move_fwd_ascii() {$/;"	f
test_source_move_fwd_newl	tests.c	/^void test_source_move_fwd_newl() {$/;"	f
test_source_move_fwd_utf8	tests.c	/^void test_source_move_fwd_utf8() {$/;"	f
test_token_edge_cases	tests.c	/^void test_token_edge_cases() {$/;"	f
test_token_init	tests.c	/^void test_token_init() {$/;"	f
test_token_next_comments	tests.c	/^void test_token_next_comments() {$/;"	f
test_token_next_id	tests.c	/^void test_token_next_id() {$/;"	f
test_token_next_nilbol_lit	tests.c	/^void test_token_next_nilbol_lit() {$/;"	f
test_token_next_num_lit	tests.c	/^void test_token_next_num_lit() {$/;"	f
test_token_next_singlechar	tests.c	/^void test_token_next_singlechar() {$/;"	f
test_token_next_str_lit	tests.c	/^void test_token_next_str_lit() {$/;"	f
tfails	tests.h	/^__attribute__((unused)) static int tfails = 0;$/;"	v
token_length	avocc.h	/^  size_t token_length;$/;"	m	struct:_avoc_item
token_pos	avocc.h	/^  size_t token_pos;$/;"	m	struct:_avoc_item
token_type_names	avocc.h	/^__attribute__((unused)) static const char *token_type_names[] = {$/;"	v
tresults	tests.h	19;"	d
trun	tests.h	32;"	d
ttotal	tests.h	/^__attribute__((unused)) static int ttotal = 0;$/;"	v
type	avocc.h	/^  } type;$/;"	m	struct:_avoc_item	typeref:enum:_avoc_item::__anon4
type	avocc.h	/^  } type;$/;"	m	struct:_avoc_token	typeref:enum:_avoc_token::__anon2
utf8_cont	avocc.c	/^static unsigned utf8_cont(avoc_source *src) {$/;"	f	file:
utf8_cp_size	avocc.c	/^static int utf8_cp_size(int cp) {$/;"	f	file:
utf8_get	avocc.c	/^static unsigned utf8_get(avoc_source *src) {$/;"	f	file:
utf8_next_cp	avocc.c	/^static int utf8_next_cp(avoc_source *src) {$/;"	f	file:
